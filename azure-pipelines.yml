# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: Default
  name: Rishi-CICD

stages:
  - stage:
    displayName: Terraform Validate
    jobs:
      - job:
        steps:
          - task: TerraformInstaller@1
            displayName: Terraform Installation
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: Terraform-Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Main'
              backendServiceArm: 'Rishi-Principal-Connection'
              backendAzureRmResourceGroupName: 'Rishi-Learning'
              backendAzureRmStorageAccountName: 'terraformstatefiless'
              backendAzureRmContainerName: 'terraform-sf'
              backendAzureRmKey: 'dev-env.tfstate'
          
          - task: TerraformTaskV4@4
            displayName: Terraform-Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Main'
              environmentServiceNameAzureRM: 'Rishi-Principal-Connection'
          
          - task: CopyFiles@2
            displayName: Copying Files
            inputs:
              SourceFolder: 'Main'
              Contents: |
                **/*
                !.terraform/**/
              TargetFolder: '$(build.artifactstagingdirectory)/artifacts'

          - task: PublishBuildArtifacts@1
            displayName: Publishing Artifacts
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/artifacts'
              ArtifactName: 'drop'
              publishLocation: 'Container'